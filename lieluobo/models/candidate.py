# coding: utf-8

"""
    猎萝卜开放平台

    猎萝卜开放平台  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Candidate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'str',
        'name': 'str',
        'gender': 'AllOfCandidateGender',
        'age': 'int',
        'mobile': 'str',
        'email': 'str',
        'birthday': 'date',
        'salary': 'float',
        'introduce': 'str',
        'location': 'str',
        'languages': 'list[str]',
        'skills': 'list[str]',
        'intended_industries': 'list[str]',
        'intended_positions': 'list[str]',
        'intended_locations': 'list[str]',
        'experiences': 'list[Experience]',
        'educations': 'list[Education]',
        'projects': 'list[Project]',
        'notify_url': 'str'
    }

    attribute_map = {
        'unique_id': 'uniqueId',
        'name': 'name',
        'gender': 'gender',
        'age': 'age',
        'mobile': 'mobile',
        'email': 'email',
        'birthday': 'birthday',
        'salary': 'salary',
        'introduce': 'introduce',
        'location': 'location',
        'languages': 'languages',
        'skills': 'skills',
        'intended_industries': 'intendedIndustries',
        'intended_positions': 'intendedPositions',
        'intended_locations': 'intendedLocations',
        'experiences': 'experiences',
        'educations': 'educations',
        'projects': 'projects',
        'notify_url': 'notifyUrl'
    }

    def __init__(self, unique_id=None, name=None, gender=None, age=None, mobile=None, email=None, birthday=None, salary=None, introduce=None, location=None, languages=None, skills=None, intended_industries=None, intended_positions=None, intended_locations=None, experiences=None, educations=None, projects=None, notify_url=None):  # noqa: E501
        """Candidate - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._name = None
        self._gender = None
        self._age = None
        self._mobile = None
        self._email = None
        self._birthday = None
        self._salary = None
        self._introduce = None
        self._location = None
        self._languages = None
        self._skills = None
        self._intended_industries = None
        self._intended_positions = None
        self._intended_locations = None
        self._experiences = None
        self._educations = None
        self._projects = None
        self._notify_url = None
        self.discriminator = None
        self.unique_id = unique_id
        if name is not None:
            self.name = name
        if gender is not None:
            self.gender = gender
        if age is not None:
            self.age = age
        if mobile is not None:
            self.mobile = mobile
        if email is not None:
            self.email = email
        if birthday is not None:
            self.birthday = birthday
        if salary is not None:
            self.salary = salary
        if introduce is not None:
            self.introduce = introduce
        if location is not None:
            self.location = location
        if languages is not None:
            self.languages = languages
        if skills is not None:
            self.skills = skills
        if intended_industries is not None:
            self.intended_industries = intended_industries
        if intended_positions is not None:
            self.intended_positions = intended_positions
        if intended_locations is not None:
            self.intended_locations = intended_locations
        if experiences is not None:
            self.experiences = experiences
        if educations is not None:
            self.educations = educations
        if projects is not None:
            self.projects = projects
        if notify_url is not None:
            self.notify_url = notify_url

    @property
    def unique_id(self):
        """Gets the unique_id of this Candidate.  # noqa: E501

        用于标识第三方系统候选人的唯一ID，不可重复  # noqa: E501

        :return: The unique_id of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Candidate.

        用于标识第三方系统候选人的唯一ID，不可重复  # noqa: E501

        :param unique_id: The unique_id of this Candidate.  # noqa: E501
        :type: str
        """
        if unique_id is None:
            raise ValueError("Invalid value for `unique_id`, must not be `None`")  # noqa: E501

        self._unique_id = unique_id

    @property
    def name(self):
        """Gets the name of this Candidate.  # noqa: E501

        姓名  # noqa: E501

        :return: The name of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Candidate.

        姓名  # noqa: E501

        :param name: The name of this Candidate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def gender(self):
        """Gets the gender of this Candidate.  # noqa: E501


        :return: The gender of this Candidate.  # noqa: E501
        :rtype: AllOfCandidateGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Candidate.


        :param gender: The gender of this Candidate.  # noqa: E501
        :type: AllOfCandidateGender
        """

        self._gender = gender

    @property
    def age(self):
        """Gets the age of this Candidate.  # noqa: E501

        年龄  # noqa: E501

        :return: The age of this Candidate.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Candidate.

        年龄  # noqa: E501

        :param age: The age of this Candidate.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def mobile(self):
        """Gets the mobile of this Candidate.  # noqa: E501

        手机号  # noqa: E501

        :return: The mobile of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Candidate.

        手机号  # noqa: E501

        :param mobile: The mobile of this Candidate.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def email(self):
        """Gets the email of this Candidate.  # noqa: E501

        邮箱  # noqa: E501

        :return: The email of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Candidate.

        邮箱  # noqa: E501

        :param email: The email of this Candidate.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def birthday(self):
        """Gets the birthday of this Candidate.  # noqa: E501

        出生年月  # noqa: E501

        :return: The birthday of this Candidate.  # noqa: E501
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Candidate.

        出生年月  # noqa: E501

        :param birthday: The birthday of this Candidate.  # noqa: E501
        :type: date
        """

        self._birthday = birthday

    @property
    def salary(self):
        """Gets the salary of this Candidate.  # noqa: E501

        当前年薪  # noqa: E501

        :return: The salary of this Candidate.  # noqa: E501
        :rtype: float
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this Candidate.

        当前年薪  # noqa: E501

        :param salary: The salary of this Candidate.  # noqa: E501
        :type: float
        """

        self._salary = salary

    @property
    def introduce(self):
        """Gets the introduce of this Candidate.  # noqa: E501

        个人简介  # noqa: E501

        :return: The introduce of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._introduce

    @introduce.setter
    def introduce(self, introduce):
        """Sets the introduce of this Candidate.

        个人简介  # noqa: E501

        :param introduce: The introduce of this Candidate.  # noqa: E501
        :type: str
        """

        self._introduce = introduce

    @property
    def location(self):
        """Gets the location of this Candidate.  # noqa: E501

        所在城市  # noqa: E501

        :return: The location of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Candidate.

        所在城市  # noqa: E501

        :param location: The location of this Candidate.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def languages(self):
        """Gets the languages of this Candidate.  # noqa: E501

        语言  # noqa: E501

        :return: The languages of this Candidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Candidate.

        语言  # noqa: E501

        :param languages: The languages of this Candidate.  # noqa: E501
        :type: list[str]
        """

        self._languages = languages

    @property
    def skills(self):
        """Gets the skills of this Candidate.  # noqa: E501

        技能  # noqa: E501

        :return: The skills of this Candidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this Candidate.

        技能  # noqa: E501

        :param skills: The skills of this Candidate.  # noqa: E501
        :type: list[str]
        """

        self._skills = skills

    @property
    def intended_industries(self):
        """Gets the intended_industries of this Candidate.  # noqa: E501

        意向行业  # noqa: E501

        :return: The intended_industries of this Candidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._intended_industries

    @intended_industries.setter
    def intended_industries(self, intended_industries):
        """Sets the intended_industries of this Candidate.

        意向行业  # noqa: E501

        :param intended_industries: The intended_industries of this Candidate.  # noqa: E501
        :type: list[str]
        """

        self._intended_industries = intended_industries

    @property
    def intended_positions(self):
        """Gets the intended_positions of this Candidate.  # noqa: E501

        意向职位  # noqa: E501

        :return: The intended_positions of this Candidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._intended_positions

    @intended_positions.setter
    def intended_positions(self, intended_positions):
        """Sets the intended_positions of this Candidate.

        意向职位  # noqa: E501

        :param intended_positions: The intended_positions of this Candidate.  # noqa: E501
        :type: list[str]
        """

        self._intended_positions = intended_positions

    @property
    def intended_locations(self):
        """Gets the intended_locations of this Candidate.  # noqa: E501

        意向城市  # noqa: E501

        :return: The intended_locations of this Candidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._intended_locations

    @intended_locations.setter
    def intended_locations(self, intended_locations):
        """Sets the intended_locations of this Candidate.

        意向城市  # noqa: E501

        :param intended_locations: The intended_locations of this Candidate.  # noqa: E501
        :type: list[str]
        """

        self._intended_locations = intended_locations

    @property
    def experiences(self):
        """Gets the experiences of this Candidate.  # noqa: E501

        工作经验  # noqa: E501

        :return: The experiences of this Candidate.  # noqa: E501
        :rtype: list[Experience]
        """
        return self._experiences

    @experiences.setter
    def experiences(self, experiences):
        """Sets the experiences of this Candidate.

        工作经验  # noqa: E501

        :param experiences: The experiences of this Candidate.  # noqa: E501
        :type: list[Experience]
        """

        self._experiences = experiences

    @property
    def educations(self):
        """Gets the educations of this Candidate.  # noqa: E501

        教育经历  # noqa: E501

        :return: The educations of this Candidate.  # noqa: E501
        :rtype: list[Education]
        """
        return self._educations

    @educations.setter
    def educations(self, educations):
        """Sets the educations of this Candidate.

        教育经历  # noqa: E501

        :param educations: The educations of this Candidate.  # noqa: E501
        :type: list[Education]
        """

        self._educations = educations

    @property
    def projects(self):
        """Gets the projects of this Candidate.  # noqa: E501

        项目经历  # noqa: E501

        :return: The projects of this Candidate.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Candidate.

        项目经历  # noqa: E501

        :param projects: The projects of this Candidate.  # noqa: E501
        :type: list[Project]
        """

        self._projects = projects

    @property
    def notify_url(self):
        """Gets the notify_url of this Candidate.  # noqa: E501

        回调地址  # noqa: E501

        :return: The notify_url of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this Candidate.

        回调地址  # noqa: E501

        :param notify_url: The notify_url of this Candidate.  # noqa: E501
        :type: str
        """

        self._notify_url = notify_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Candidate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Candidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
