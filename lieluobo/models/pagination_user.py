# coding: utf-8

"""
    猎萝卜开放平台

    猎萝卜开放平台  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaginationUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page': 'int',
        'size': 'int',
        'total': 'int',
        'page_count': 'int',
        'items': 'list[User]',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'page': 'page',
        'size': 'size',
        'total': 'total',
        'page_count': 'pageCount',
        'items': 'items',
        'limit': 'limit',
        'offset': 'offset'
    }

    def __init__(self, page=None, size=None, total=None, page_count=None, items=None, limit=None, offset=None):  # noqa: E501
        """PaginationUser - a model defined in Swagger"""  # noqa: E501
        self._page = None
        self._size = None
        self._total = None
        self._page_count = None
        self._items = None
        self._limit = None
        self._offset = None
        self.discriminator = None
        if page is not None:
            self.page = page
        if size is not None:
            self.size = size
        if total is not None:
            self.total = total
        if page_count is not None:
            self.page_count = page_count
        if items is not None:
            self.items = items
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def page(self):
        """Gets the page of this PaginationUser.  # noqa: E501


        :return: The page of this PaginationUser.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PaginationUser.


        :param page: The page of this PaginationUser.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def size(self):
        """Gets the size of this PaginationUser.  # noqa: E501


        :return: The size of this PaginationUser.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PaginationUser.


        :param size: The size of this PaginationUser.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def total(self):
        """Gets the total of this PaginationUser.  # noqa: E501


        :return: The total of this PaginationUser.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PaginationUser.


        :param total: The total of this PaginationUser.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def page_count(self):
        """Gets the page_count of this PaginationUser.  # noqa: E501


        :return: The page_count of this PaginationUser.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this PaginationUser.


        :param page_count: The page_count of this PaginationUser.  # noqa: E501
        :type: int
        """

        self._page_count = page_count

    @property
    def items(self):
        """Gets the items of this PaginationUser.  # noqa: E501


        :return: The items of this PaginationUser.  # noqa: E501
        :rtype: list[User]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PaginationUser.


        :param items: The items of this PaginationUser.  # noqa: E501
        :type: list[User]
        """

        self._items = items

    @property
    def limit(self):
        """Gets the limit of this PaginationUser.  # noqa: E501


        :return: The limit of this PaginationUser.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PaginationUser.


        :param limit: The limit of this PaginationUser.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this PaginationUser.  # noqa: E501


        :return: The offset of this PaginationUser.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PaginationUser.


        :param offset: The offset of this PaginationUser.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaginationUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
