# coding: utf-8

"""
    猎萝卜开放平台

    猎萝卜开放平台  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Company(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'str',
        'name': 'str',
        'license_no': 'str',
        'contact_name': 'str',
        'contact_mobile': 'str',
        'notify_url': 'str',
        'state': 'AllOfCompanyState',
        'order_state': 'AllOfCompanyOrderState'
    }

    attribute_map = {
        'unique_id': 'uniqueId',
        'name': 'name',
        'license_no': 'licenseNo',
        'contact_name': 'contactName',
        'contact_mobile': 'contactMobile',
        'notify_url': 'notifyUrl',
        'state': 'state',
        'order_state': 'orderState'
    }

    def __init__(self, unique_id=None, name=None, license_no=None, contact_name=None, contact_mobile=None, notify_url=None, state=None, order_state=None):  # noqa: E501
        """Company - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._name = None
        self._license_no = None
        self._contact_name = None
        self._contact_mobile = None
        self._notify_url = None
        self._state = None
        self._order_state = None
        self.discriminator = None
        self.unique_id = unique_id
        self.name = name
        if license_no is not None:
            self.license_no = license_no
        self.contact_name = contact_name
        self.contact_mobile = contact_mobile
        if notify_url is not None:
            self.notify_url = notify_url
        if state is not None:
            self.state = state
        if order_state is not None:
            self.order_state = order_state

    @property
    def unique_id(self):
        """Gets the unique_id of this Company.  # noqa: E501

        用于标识第三方系统公司的唯一ID，不可重复  # noqa: E501

        :return: The unique_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Company.

        用于标识第三方系统公司的唯一ID，不可重复  # noqa: E501

        :param unique_id: The unique_id of this Company.  # noqa: E501
        :type: str
        """
        if unique_id is None:
            raise ValueError("Invalid value for `unique_id`, must not be `None`")  # noqa: E501

        self._unique_id = unique_id

    @property
    def name(self):
        """Gets the name of this Company.  # noqa: E501

        公司名  # noqa: E501

        :return: The name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        公司名  # noqa: E501

        :param name: The name of this Company.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def license_no(self):
        """Gets the license_no of this Company.  # noqa: E501

        统一社会信用编码  # noqa: E501

        :return: The license_no of this Company.  # noqa: E501
        :rtype: str
        """
        return self._license_no

    @license_no.setter
    def license_no(self, license_no):
        """Sets the license_no of this Company.

        统一社会信用编码  # noqa: E501

        :param license_no: The license_no of this Company.  # noqa: E501
        :type: str
        """

        self._license_no = license_no

    @property
    def contact_name(self):
        """Gets the contact_name of this Company.  # noqa: E501

        联系人姓名  # noqa: E501

        :return: The contact_name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this Company.

        联系人姓名  # noqa: E501

        :param contact_name: The contact_name of this Company.  # noqa: E501
        :type: str
        """
        if contact_name is None:
            raise ValueError("Invalid value for `contact_name`, must not be `None`")  # noqa: E501

        self._contact_name = contact_name

    @property
    def contact_mobile(self):
        """Gets the contact_mobile of this Company.  # noqa: E501

        联系人电话  # noqa: E501

        :return: The contact_mobile of this Company.  # noqa: E501
        :rtype: str
        """
        return self._contact_mobile

    @contact_mobile.setter
    def contact_mobile(self, contact_mobile):
        """Sets the contact_mobile of this Company.

        联系人电话  # noqa: E501

        :param contact_mobile: The contact_mobile of this Company.  # noqa: E501
        :type: str
        """
        if contact_mobile is None:
            raise ValueError("Invalid value for `contact_mobile`, must not be `None`")  # noqa: E501

        self._contact_mobile = contact_mobile

    @property
    def notify_url(self):
        """Gets the notify_url of this Company.  # noqa: E501

        回调地址  # noqa: E501

        :return: The notify_url of this Company.  # noqa: E501
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this Company.

        回调地址  # noqa: E501

        :param notify_url: The notify_url of this Company.  # noqa: E501
        :type: str
        """

        self._notify_url = notify_url

    @property
    def state(self):
        """Gets the state of this Company.  # noqa: E501


        :return: The state of this Company.  # noqa: E501
        :rtype: AllOfCompanyState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Company.


        :param state: The state of this Company.  # noqa: E501
        :type: AllOfCompanyState
        """

        self._state = state

    @property
    def order_state(self):
        """Gets the order_state of this Company.  # noqa: E501


        :return: The order_state of this Company.  # noqa: E501
        :rtype: AllOfCompanyOrderState
        """
        return self._order_state

    @order_state.setter
    def order_state(self, order_state):
        """Sets the order_state of this Company.


        :param order_state: The order_state of this Company.  # noqa: E501
        :type: AllOfCompanyOrderState
        """

        self._order_state = order_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Company, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
