# coding: utf-8

"""
    猎萝卜开放平台

    猎萝卜开放平台  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Education(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'school': 'str',
        'major': 'str',
        'degree': 'AllOfEducationDegree',
        'started_at': 'date',
        'ended_at': 'date'
    }

    attribute_map = {
        'school': 'school',
        'major': 'major',
        'degree': 'degree',
        'started_at': 'startedAt',
        'ended_at': 'endedAt'
    }

    def __init__(self, school=None, major=None, degree=None, started_at=None, ended_at=None):  # noqa: E501
        """Education - a model defined in Swagger"""  # noqa: E501
        self._school = None
        self._major = None
        self._degree = None
        self._started_at = None
        self._ended_at = None
        self.discriminator = None
        self.school = school
        if major is not None:
            self.major = major
        if degree is not None:
            self.degree = degree
        if started_at is not None:
            self.started_at = started_at
        if ended_at is not None:
            self.ended_at = ended_at

    @property
    def school(self):
        """Gets the school of this Education.  # noqa: E501

        学校名称  # noqa: E501

        :return: The school of this Education.  # noqa: E501
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this Education.

        学校名称  # noqa: E501

        :param school: The school of this Education.  # noqa: E501
        :type: str
        """
        if school is None:
            raise ValueError("Invalid value for `school`, must not be `None`")  # noqa: E501

        self._school = school

    @property
    def major(self):
        """Gets the major of this Education.  # noqa: E501

        专业名称  # noqa: E501

        :return: The major of this Education.  # noqa: E501
        :rtype: str
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this Education.

        专业名称  # noqa: E501

        :param major: The major of this Education.  # noqa: E501
        :type: str
        """

        self._major = major

    @property
    def degree(self):
        """Gets the degree of this Education.  # noqa: E501


        :return: The degree of this Education.  # noqa: E501
        :rtype: AllOfEducationDegree
        """
        return self._degree

    @degree.setter
    def degree(self, degree):
        """Sets the degree of this Education.


        :param degree: The degree of this Education.  # noqa: E501
        :type: AllOfEducationDegree
        """

        self._degree = degree

    @property
    def started_at(self):
        """Gets the started_at of this Education.  # noqa: E501

        入学日期  # noqa: E501

        :return: The started_at of this Education.  # noqa: E501
        :rtype: date
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Education.

        入学日期  # noqa: E501

        :param started_at: The started_at of this Education.  # noqa: E501
        :type: date
        """

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this Education.  # noqa: E501

        毕业日期  # noqa: E501

        :return: The ended_at of this Education.  # noqa: E501
        :rtype: date
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Education.

        毕业日期  # noqa: E501

        :param ended_at: The ended_at of this Education.  # noqa: E501
        :type: date
        """

        self._ended_at = ended_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Education, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Education):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
